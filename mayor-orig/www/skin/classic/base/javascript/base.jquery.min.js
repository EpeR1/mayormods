var debug = false;
function _debug(str) {
    if (debug) console.log(str);
}

// A $.getScript hívás cache-eléséért...
$.ajaxSetup({
  cache: true
});

includeCSS = function(href) {
    for (i = 0; i < arguments.length; i++) {
        href = arguments[i];
	var cssLink = $("<link>");
	$("head").append(cssLink); //IE hack: append before setting href
	cssLink.attr({
	    rel:  "stylesheet",
	    type: "text/css",
	    href: href+'?r='+$('body').data('mayorrev')
	});
    }
};

// Hogy az aloldalak megváják az alábbi modulok betöltését...
$.holdReady(true);
    // A korábbi loadJs megoldás helyett...
    includeCSS(
	"skin/classic/share/javascript/jquery-ui/css/base/jquery-ui.min.css",
	"skin/classic/share/javascript/jquery-ui/css/base/jquery-ui-timepicker-addon.css"
    );

      $.getScript("skin/classic/share/javascript/jquery-ui/jquery-ui.min.js").done(function() {
	$.getScript("skin/classic/share/javascript/jquery-ui/i18n/jquery.ui.datepicker-hu.min.js").done(function() {
	    $.getScript("skin/classic/share/javascript/jquery-ui/jquery-ui-timepicker-addon.js").done(function() {
		$.getScript("skin/classic/share/javascript/jquery-ui/i18n/jquery-ui-timepicker-hu.js").done(function() {
		    $.holdReady(false);
		});
	    });
	});
      });


$(document).ready(function() {

    /*var isMobile = false;
    if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
    || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) isMobile = true;
    */

  $('body').bind('click', mayorClick);
  $('body').bind('change', mayorChange);
  $('body').bind('keypress', mayorKeyPress);
  $('body').bind('keydown', mayorKeyDown);
  $('body').bind('submit', mayorSubmit);

  $(window).resize(mayorNavResize);
  if ($(document).width()>$(window).width()) mayorNavResize();
  $('#leftsideclose').bind('click', mayorNavResize);

  if (e = $('#focus')) e.focus(); // A focus id-t használhatjuk automatikus fokuszálásra... (ld. login)
  // A loadUrl id-t használhatjuk automatikus betöltésre... hol használunk ilyet? Például a download oldalon.
  loadElement = $('#loadUrl');
  if (loadElement.length > 0) { window.location.replace(loadElement.attr('href')); }

  $('.date').datepicker({ dateFormat: "yy-mm-dd" });
  $('.datetime').datetimepicker({ dateFormat: "yy-mm-dd", timeFormat: "HH:mm", controlTypee: "select" });
  $('#hideHelp').click(function() { $('#takaro').hide(); });
  $('#help').draggable();
  $('#updateWindow').draggable({ handle: '#updateHeader' });
  var uwNext = {'width': '100%', 'top': '10px', 'left': '0px' };
  $('#updateHeader').dblclick(function(event) {
        tmp = $('#updateWindow').css(['width','top','left']);
        $('#updateWindow').css(uwNext);
        uwNext = tmp;
  });

  // hibakijelzés
  mayorErrorCounter = 0;
  $('#mayorErrorSmall').hover(
    function() {
	if ($('#mayorErrorSmall div').height() > 25 ) {
	    var h = $('#mayorErrorSmall div').height();
	    if (h>=300) h=300;
	    $('#mayorErrorSmall').css('overflow','auto');
	    $('#mayorErrorSmall').stop().animate({height: h+"px"}, 400);
	}
	mayorErrorCounter++;
    },
    function() {
	if ($('#mayorErrorSmall').hasClass('closedbyuser')==true) return;
	if ($('#mayorErrorSmall div').height() > 25 ) {
	    $('#mayorErrorSmall').css('overflow','hidden');
	}
	if (mayorErrorCounter>3) {
	    $('#mayorErrorSmall').slideUp( 300 );
//	    $('#mayorErrorSign').show().animate({ color: 'red'}, 1000).delay(1000).animate({color: "#778899"}, 1000);
	    $('#mayorErrorSign').fadeIn(300);
	} else {
	    $('#mayorErrorSmall').stop().animate({height: "20px"}, 200);
	}
    }
  );

// !!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!! DEV
//	$('#mayorNav').toggle();

  $('#hamburgerIcon').click(function(){
	window.scrollTo(0, 0);
	$(this).toggleClass('nyitva').toggleClass('is-active');
	$('#mayorNav').toggle();
  });

  $('.hamburger').click(function(){
	window.scrollTo(0, 0);
	$(this).toggleClass('is-active');
	$('#mayorNav').toggle();
  });

    // --TODO mayorClick()
  $('#mayorErrorHide').click(function(){
	mayorErrorCounter=0;
	$('#mayorErrorSmall').addClass('closedbyuser').fadeOut('fast');
	$('#mayorErrorSign').fadeIn('fast');
  });
    // --TODO mayorClick();
  $('#mayorErrorSign').click(function(){
	mayorErrorCounter=0;
	$('#mayorErrorSmall').slideDown(100);
	$('#mayorErrorSign').fadeOut();	
  });
    // --TODO mayorSubmit
  $('#mayorGlobalLogin form.check').submit(function() {
	var inputs = $('#mayorGlobalLogin form input');
	for (i=0 ; i<inputs.length; i++) {
	    if (inputs[i].name==='userAccount' || inputs[i].name==='userPassword') {
		if ($(inputs[i]).val() === '') {
		    $(inputs[i]).prev().addClass('failed');
		    return false;
		}
	    }
	}
	$('#mayorGlobalLogin form').submit(); 
  });
  $('#mayorGlobalLogin form input').focus(function(event) {
	$(event.target).prev().removeClass('failed');
  });
  $('#mayorGlobalLogin div.large').hover(function(event) {
	$(event.target).removeClass('icon-lock').addClass('icon-unlock');
  },function(event) {
	$(event.target).removeClass('icon-unlock').addClass('icon-lock');
  }
  );
  $('#mayorGlobalLogin form.fb').submit(function() { // facebook
	    FB.getLoginStatus(function(response) {
		if (response.status === 'connected') {
		    mayor_facebookconnect_redirect();
		} else if (response.status === 'not_authorized') {
		    FB.login(function(loginResponse) {
			if (loginResponse.status=='connected') {
			    mayor_facebookconnect_redirect();
			}
		    });
		} else {
		    FB.login(function(loginResponse) {
			if (loginResponse.status=='connected') {
			    mayor_facebookconnect_redirect();
			}
		    });
		}
	    },true);
	    return false;
  });

  $('#logo').on('dragstart', function(event) { event.preventDefault(); });

  // onLoadUpdate
    $('.onLoadUpdate').each( function(index, element) {
	    var formElement = $(element).closest('form');
	    updateForm(formElement, $(element));
    });

    var url = document.URL;
    if (url.indexOf('policy=private')>0) {
	if ($('#SESSION_ALERT_TIME').val() !== undefined) {
	    var sessionAlertTime = $('#SESSION_ALERT_TIME').val();
	    if (sessionAlertTime>0) setTimeout('mayorSessionTimeOutAlert()',sessionAlertTime);
	}
	if ($('#SESSION_MAX_IDLE_TIME').val() !== undefined) {
	    var sessionMaxIdleTime = $('#SESSION_MAX_IDLE_TIME').val();
	    if (sessionMaxIdleTime>0) setTimeout('mayorSessionTimedOut()',sessionMaxIdleTime);
	}
    }
    $('form').preventDoubleSubmission();

});

/* 
    .gsub --> .replace 
    .up --> parents()[0] = parent(), vagy inkább closest?
    include --> indexOf() > -1
    .down --> .find
    $F() --> .val()
*/

(function($) {
    var re = /([^&=]+)=?([^&]*)/g;
    var decode = function(str) {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    };
    $.parseParams = function(query) {
        var params = {}, e;
        if (query) {
            if (query.substr(0, 1) == '?') {
                query = query.substr(1);
            }

            while (e = re.exec(query)) {
                var k = decode(e[1]);
                var v = decode(e[2]);
                if (params[k] !== undefined) {
                    if (!$.isArray(params[k])) {
                        params[k] = [params[k]];
                    }
                    params[k].push(v);
                } else {
                    params[k] = v;
                }
            }
        }
        return params;
    };
})(jQuery);

mayorKeyDown = function(event) {
    var element = $(event.target);
    var charKeyCode = event.keyCode ? event.keyCode : event.which;
    var shiftKey = event.shiftKey ? event.shiftKey : ((charKeyCode == 16) ? true : false);
    var altKey = event.altKey ? event.altKey : ((charKeyCode == 18) ? true : false);
    var ctrlKey = event.ctrlKey ? event.ctrlKey : ((charKeyCode == 17) ? true : false);

	// Esc - WebKit csak keyup esetén
	if (charKeyCode==27) { // Esc
	    $('#takaro').hide();			// takaró elem
	    $('#keyHelp').hide();		// gyorsbillentyűk
	    $('#help').hide();			// súgó
	    $('.inlinehelp .openable').hide();  // helyi súgó
	    $('#mayorSearch').hide();		// kereső
	    if ($('#inform') !== null) $('#inform').parent('div').hide();	// haladási/tanmenet
	    if ($('#haladform') !== null) $('#haladform').parent('div').hide();	// haladási/tankör órái
	    if ($('#jegyAdat') !== null) $('#jegyAdat').hide();		// osztályozó/tankor
	    if ($('#updateWindow').is(':visible')) {
		$('#updateWindow').hide();		// update ablak
		if ($.isFunction(hideUpdateLayer)) hideUpdateLayer();
	    }
	    if ($('#updateWindowSideSub').hasClass('nyitva') ) {
		$('#updateWindowSideSub').removeClass('nyitva');
	    } else if ($('#updateWindowSide').hasClass('nyitva') ) {
		$('#updateWindowSide').removeClass('nyitva');		// update ablak (jobb oldal)
		if ($.isFunction(hideUpdateWindowSide)) hideUpdateWindowSide();
	    } else if (ctrlKey) { //nyitjuk
		$('#updateWindowSide').addClass('nyitva');
		//$('#updateWindowSideSub').toggleClass('nyitva');
	    }
	} else if (charKeyCode==112) { // F1 - Help // charKeyCode==121 F10 
	    var params = $.parseParams(window.location.toString().split('?')[1] || '' );
	    var page=params.page?params.page:'';
	    var sub=params.sub?params.sub:'';
	    var f=params.f?params.f:'';
	    var url = "http://wiki.mayor.hu/doku.php?id="+page+":"+sub+":"+f;
	    var helpElement = $('#help');
	    if (typeof(helpElement) === 'undefined' || helpElement === null) {
		window.open(url,'help');
	    } else {
		if (helpElement.css('display') == 'none') helpElement.children('iframe').prop('src',url);
		$('#takaro').fadeToggle('fast');			// takaró elem
		helpElement.fadeToggle('fast');
	    }
//	    event.stopImmediatePropagation();
    	    event.preventDefault();
//	    event.stopPropagation();
	} else if (charKeyCode==86 && ctrlKey && shiftKey) { // Ctrl-Shift-V: Vakbarát nézet
		if (location.toString().indexOf('skin')>-1) {
		    window.location = location.toString().replace(/skin=([^&]*)/,'skin=vakbarat');
		} else {
		    if (location.toString().indexOf('?')>-1) window.location = location.toString()+'&skin=vakbarat';
		    else window.location = location.toString()+'?skin=vakbarat';
		}
	} else if (charKeyCode==38) { // fel nyíl
	    if (element.closest('#mayorSearch').length == 1) {
		$('#mayorSearch *:focus').removeClass('aktiv').prev('a').focus();
		$('#mayorSearch a:focus').addClass('aktiv');
		event.preventDefault();
	    }
	} else if (charKeyCode==40) { // le nyíl
	    if (element.closest('#mayorSearch').length == 1) {
		$('#mayorSearch *:focus').removeClass('aktiv').next('a').focus();
		$('#mayorSearch a:focus').addClass('aktiv');
		event.preventDefault();
	    }
	} else {
	}

}

mayorKeyPress = function(event) {
    var element = $(event.target);
    var charKeyCode = event.keyCode ? event.keyCode : event.which;
    var shiftKey = event.shiftKey ? event.shiftKey : ((charKeyCode == 16) ? true : false);
    var altKey = event.altKey ? event.altKey : ((charKeyCode == 18) ? true : false);
    var ctrlKey = event.ctrlKey ? event.ctrlKey : ((charKeyCode == 17) ? true : false);

    if ($('capsLockWarning')) {
	var s = String.fromCharCode( event.which );
	if ( s.toUpperCase() === s && s.toLowerCase() !== s && !event.shiftKey ) {
		$('#capsLockWarning').show();        
	} else {
		$('#capsLockWarning').hide();
	}
    }

    // formon belül
    if(event.target.type!='text' && event.target.type!='textarea' && event.target.type!='select' && event.target.type!='select-one' && event.target.type!='password') {
	    var location = window.location.toString();
	    if (charKeyCode==63) { // ?: Help
		$('#takaro').toggle();
		$('#keyHelp').toggle();
	    } else if (charKeyCode==83) { // S: settings
		$('#settings').toggle();
	    } else if (charKeyCode==70 || charKeyCode==95) { // F,_: find
		$('#mayorSearch').toggle();
		event.preventDefault();
		$('#mayorSearch input[type=text]').focus();
	    } else if (charKeyCode==68) { // D: debug
		$('#debug').toggle();
//	    } else if (charKeyCode==104) {
//		alert('Alt-H: HELP: '+event.altKey+event.target.type);
	    } else if (charKeyCode==76) { // L: login/logout
		if (location.indexOf('policy=private')>-1 || location.indexOf('policy=parent')>-1) {
		    window.location = window.location.toString().replace(/page=([^&]*)/,'page=session').replace(/sub=([^&]*)/,'sub=').replace(/f=([^&]*)/,'f=logout').replace(/policy=([^&]*)/,'policy=public');
		} else {
		    if (location.indexOf('?')>-1) {
			// window.location = window.location.toString().replace(/page=([^&]*)/,'page=auth').replace(/sub=([^&]*)/,'sub=').replace(/f=([^&]*)/,'f=login').replace(/policy=([^&]*)/,'policy=public');
			window.location=window.location.toString().replace(/\?(.*)/,'')+'?page=auth&f=login';
		    } else {
			window.location = window.location+'?page=auth&sub=&f=login&policy=public';
		    }
		}
	    } else {
	    }
    }
}

mayorClick = function(event) {
    var element = $(event.target);
    $('body').data('lastClick',element);
    $('.inlinehelp .openable:visible').hide();
    $('#mayorSearch:visible').hide();
    if (element.hasClass('confirm')) {
            // A confirm elemre kattintva a form jóváhagyását előbb jóvá kell hagyni
            if (!confirm(element.prop('title'))) { 
		event.preventDefault();
	    }
    }
    if (element.hasClass('onClickHideShow')) {
        var o = element.parents('.hideShowContainer').find('.openable').toggle();
        event.preventDefault();
    }

    if (element.hasClass('onClickHide')) {
	// Az onClickHide elem kattintásra becsukja a hozzárendelt elemet. A hozzárendelés
	// az id-ben történik: 'hide'+ElemId+[':'+elemId2...]
	var id = element[0].id;
        if (id && id.substring(0,4) == 'hide') {
            var openables = ('#'+id.charAt(4).toLowerCase()+ id.substring(5).replace(':',', #') );
	    $(openables).hide();
        }
    }
    if (element.hasClass('onClickShow')) {
	// Az onClickShow elem kattintásra kinyitja a hozzárendelt elemet, miközben a többi
	// őt tartalmazó hideShowContainer-en belüli openable elemet becsukaja. A hozzárendelés
	// az id-ben történik: 'show'+ElemId+[':'+elemId2...]
	var container = element.parents('.hideShowContainer');
	var openable  = container.find('.openable').hide();
	var onclickshow = container.find('.onClickShow').removeClass('selected');
	var id = element[0].id;
	if (id && id.substring(0,4) == 'show') {
    	    var openables = ('#'+id.charAt(4).toLowerCase()+ id.substring(5).replace(':',', #') );
	    $(openables).show();
	}
	element.addClass('selected');
    }
    if (element[0].id == 'updateCloseButtonClick') {
	if ($('#updateWindow').is(':visible')) {
	    $('#updateWindow').hide();
	    $('#takaro').hide();
	    if ($.isFunction(hideUpdateLayer)) hideUpdateLayer();
	}
    }
    if (element[0].id == 'btn_updateWindowSideClose') {
	//if ($('#updateWindowSide').is(':visible')) {
	    $('#updateWindowSideSub').removeClass('nyitva');
	    $('#updateWindowSide').removeClass('nyitva');
	    if ($.isFunction(hideUpdateWindowSide)) hideUpdateWindowSide();
	//}
    }
    if (element[0].id == 'btn_updateWindowSideSubClose') {
	    $('#updateWindowSideSub').removeClass('nyitva');
	    if ($.isFunction(hideUpdateWindowSideSub)) hideUpdateWindowSideSub();
    }
    if (element.hasClass('onClickUpdateAction')) {
//TODO - check
	    element.parents('form').find('input[name=action]').val(element[0].id);
    }
    if (element.hasClass('onClickUpdateWindow')) {
	    // A kattintott elem href paraméteréből vett url-ből kiveszi a getParameters-ben megadott
	    // paramétereken kívüli paramétereket, ezeket post paraméterként rakja az updateForm-ba.
	    // Az url "maradéka" pedig a form action-be kerül, végül update-eli a form-ot...
	    formElement = $('#updateForm');
	    formElement.html('');
	    var origUrl = '', title = '';
	    if (element.prop('title')) $('#updateHeader').html(element.prop('title'));
	    if (element.prop('href')) origUrl = element.prop('href');
	    var pos = origUrl.indexOf("?");
	    if (pos != -1) url = origUrl.substr(0,pos);
	    else url = origUrl;
	    var getParameters = ["page", "sub", "f", "lang", "sessionID", "policy"];
	    var separator = '?';

	    var o = $.parseParams( origUrl.split('?')[1] );
	    $.each(o,function(key,value) {
		if (getParameters.indexOf(key) != -1) {
		    url = url+separator+key+'='+value;
		    separator='&';
		} else if (key == 'skin') {
		    url = url+separator+'skin=ajax';
		    separator='&';
		} else {
		    //formElement.insert({ bottom: new Element('input', {type : 'hidden', name : key, value : value}) });
		    jQuery('<input/>').attr('type','text').attr('name',key).attr('value',value).appendTo(formElement);
		}
	    });

	    formElement.prop('action',url);
	    updateForm(formElement, element);
//	    event.stopImmediatePropagation();
	    event.preventDefault();
	    event.stopPropagation();
    }
    if (element.hasClass('onClickUpdate')) {
	    event.preventDefault();
	    	// Az onClickUpdate class tagjaira kattintva update-eli az őket tartalmazó formot
	    var formElement = element.parents("form");
	    updateForm(formElement, element);
	    event.preventDefault();
	    event.stopPropagation();
//	    jQuery.post(url);
    }
    if (event.target.id == 'nav2fullmenu') {
	$('#nav2').find('.fullmenuitem').toggle();
	$('#nav2').find('.nav2menuitem').toggle();
	$('#nav2fullmenu').toggleClass('aktiv');
    }
    if (event.target.id ==='skin-oldschool') {
	mayorSkinChange('oldschool');
    }
    if (event.target.id ==='skin-vakbarat') {
	mayorSkinChange('vakbarat');
    }
}




// || event.target.id ==='mayorNaviSearchIcon') {


mayorSkinChange = function(toSkin) {
	if (location.toString().indexOf('skin')>-1) {
		    window.location = location.toString().replace(/skin=([^&]*)/,'skin='+toSkin);
	} else {
		    if (location.toString().indexOf('?')>-1) window.location = location.toString()+'&skin='+toSkin;
		    else window.location = location.toString()+'?skin='+toSkin;
	}
}

mayorChange = function(event) {

    var element = $(event.target);

    if (element.hasClass('onChangeSubmit') && window.location.toString().indexOf('skin=vakbarat')<=0) {
	element.parents('form').submit();
    }
    if (element.closest('form.onChangeRequest').length > 0) {
	var formElement = element.closest('form.onChangeRequest');

	var uriOrig = formElement.attr('action');
	var uri = formElement.attr('action').replace(/skin=([^&]*)/,'skin=ajax')+'&request=true';

	// input class="ajaxOption"-ban megadott value="onChangeRequestStop" tudja tiltani az eseményt (új szülő felvétele - diakSzulo oldal)
	var ajaxRequestOK = (formElement.find('input.ajaxOption[value=onChangeRequestStop]').length == 0);
	// A class="DOA" - disable on ajax req - elemek letiltása
	formElement.find('.DOA').prop('disabled',true);

	formElement.attr('action', uri);
	element.addClass('ajaxRequest');
	if (ajaxRequestOK) {
	    ajaxRequest(formElement, {
        		onSuccess: function(transport, status, xhr) {
		    		element.addClass('ajaxRequestDone');
		    		element.removeClass('ajaxRequest');
		    		element.removeClass('ajaxRequestError');
				formElement.find('.DOA').prop('disabled',false).removeClass('ajaxRequest');
				// Egyedi kezelőfüggvény meghívása
				// pre-be pl.: $_JSON['onSuccess']['func'] = 'myTestFunc'; $_JSON['onSuccess']['param'] = array('txt' => 'Hahó');
				// js-be pl.: myTestFunc = function(param) { console.log('myTestFunc: '+param.txt); }
				if (transport.onSuccess && transport.onSuccess.func && $.isFunction(window[transport.onSuccess.func])) 
					window[transport.onSuccess.func](transport.onSuccess.param);

			},
        		onFailure: function() {
		    		element.addClass('ajaxRequestError'); 
		    		element.removeClass('ajaxRequest');
		    		element.removeClass('ajaxRequestDone');
				formElement.find('.DOA').prop('disabled',false).removeClass('ajaxRequest');
			}
	    });
	}
	formElement.attr('action', uriOrig);

    }


    if (element.hasClass('onChangeUpdate')) {
	// Az onChangeUpdate class tagjaira kattintva update-eli az őket tartalmazó formot


	var formElement = $(element).closest('form');
	updateForm(formElement, $(element));
	event.preventDefault();
	event.stopPropagation();
    }



}

function ucfirst(str) {
  var f = str.charAt(0).toUpperCase();
  return f + str.substr(1);
}
function lcfirst(str) {
  var f = str.charAt(0).toLowerCase();
  return f + str.substr(1);
}


mayorSubmit = function(event) {
    var element = $(event.target);
    var formElement;
    if (element.is('form')) {
	formElement = element;
	// elmentettük a body.data.lastClick - be, hogy mi volt az utolsó clicked elem
	var element2 = $('body').data('lastClick');
    } else {
	formElement = element.parents('form');
    }
    if (formElement.hasClass('onSubmitUpdate')) {
	event.preventDefault();
	// Az onSubmitUpdate class-ba sorolt formok submit esetén update-elve lesznek - !! az összes submit elmegy !!
	updateForm(formElement, element2);
	event.stopImmediatePropagation();
	event.stopPropagation();
	return false;
    } else if (element.attr('id') == 'mayorSearch') {
	//$('#nav li.active a:contains()')
	$('#mayorSearch a').remove();
	var pattern = $('#mayorSearch input[type=text]').val();
	$('#nav li a:contains('+pattern+')').clone().appendTo('#mayorSearch');
	if (pattern!=lcfirst(pattern))
	    $('#nav li a:contains('+lcfirst(pattern)+')').clone().appendTo('#mayorSearch');
	if (pattern!=ucfirst(pattern))
	    $('#nav li a:contains('+ucfirst(pattern)+')').clone().appendTo('#mayorSearch');
/*	$('#nav li.active a:contains('+pattern+')').clone().appendTo('#mayorSearch');
	if (pattern!=lcfirst(pattern))
	    $('#nav li.active a:contains('+lcfirst(pattern)+')').clone().appendTo('#mayorSearch');
	if (pattern!=ucfirst(pattern))
	    $('#nav li.active a:contains('+ucfirst(pattern)+')').clone().appendTo('#mayorSearch');
*/
	return false;
    }
}
/*
var lastScrollLeft = 0;
$(window).scroll(function() {
    var documentScrollLeft = $(document).scrollLeft();
    if (lastScrollLeft != documentScrollLeft) {
        //console.log('scroll x'+documentScrollLeft);
        lastScrollLeft = documentScrollLeft;
    }
    //mayorNavResize();
});
*/

var mayorLoaderCounter = 0;
mayorLoaderStart = function() {
    mayorLoaderCounter++;
    $('#poz li:first').addClass('mayorLoader');
}
mayorLoaderStop = function() { // override by naplo.js
    $('#poz li:first').removeClass('mayorLoader');
}


mayorNavResize = function(event) {
    if (event===undefined) return true;

    var wi = $(window).width();
    var navElem = $('#nav2');
    var mayorbodyElem = $('#mayorbody');
    var mayorfootElem = $('#mayorfoot');
    var smallWidth = false;
    if (event.target.id == "leftsideclose") swap=true; else swap = false;
    if (navElem) {
	if ($(document).width()>$(window).width()+140) smallWidth = true;
	if ((swap || wi<1100 || smallWidth) && navElem.hasClass('vertical')) {
	    mayorbodyElem.removeClass('leftpad').addClass('toppad');
	    mayorfootElem.removeClass('leftpad').addClass('toppad');
	    navElem.removeClass('vertical').addClass('horizontal');
//	    navElem.addClass('horizontal');
//	    mayorbodyElem.addClass('toppad');
//	    mayorfootElem.addClass('toppad');
	    new $.ajax('/index.php?skin=ajax&request=true&page=session&sub=&f=set&policy=public&layout=1', {
		method: 'get',
		success: function(transport) {
		}
	    });
	} else if 
	((swap || (wi>=1100 && !smallWidth)) && navElem.hasClass('horizontal')) {
	    mayorbodyElem.removeClass('toppad').addClass('leftpad');
	    mayorfootElem.removeClass('toppad').addClass('leftpad');
	    navElem.removeClass('horizontal').addClass('vertical');
//	    navElem.addClass('vertical');
//	    mayorbodyElem.addClass('leftpad');
//	    mayorfootElem.addClass('leftpad');
	    new $.ajax('/index.php?skin=ajax&request=true&page=session&sub=&f=set&policy=public&layout=0', {
		method: 'post',
		success: function(transport) {
		}
	    });
	} else {
	    //console.log('Nothing to do');
	}
    } else {
    	//console.log('Not ready');
    }
    /*if ($('#nav1').data('nav1count')==0) { // ha nincs nav1 menu, akkor engedélyezzük a nav dinamikus resize-ját (igen ám, de inicializálásnál ugrál)
	$('nav').show();
	var navSize = 140+$('#mayorGlobalLogin').width() + 0;
	$('#nav>li').each(function() {
    	navSize+=($(this).width());
	    if (navSize>$('#mayorhead').width()) {
	        $(this).hide();
	    } else {
		$(this).show();
	    }
	});
    }*/

}

updateForm = function(formElement, submitElement) {

    var url = formElement.attr('action').replace(/skin=([^&]*)/,'skin=ajax');
// szerintem ez mpst nem kell... ?
//    formElement.find('input[type=submit]').prop('disabled',true);
//    submitElement.prop('disabled',false);
    if (submitElement && submitElement.attr('name')!==undefined) options = { submitClass: submitElement.attr('class'), submitName: submitElement.attr('name'), submitValue: submitElement.val() };
    else options = false;
    ajaxUpdate(formElement, url, options);

}

/**
 * Az options paraméterben át kell adni az átadandó submit elem nevét és értékét, mert a serializeArray nem teszi be!
 * , és a serialize()???
**/
ajaxUpdate = function(container, url, options) {

    mayorLoaderStart();
    postData = container.serializeArray();
    if (options) postData.push({ name: options.submitName, value: options.submitValue });
    postData.push({ name: 'mayorToken', value : $('body').data('mayortoken') });

    $.ajax(url,{
	data: postData,
	type: 'POST',
	success: function(transport, status, xhr){
	    var contentType=xhr.getResponseHeader('Content-type');
	    if (contentType.indexOf('application/json')>-1 || contentType.indexOf('text/html')>-1) {
		if ( typeof transport.html !== 'undefined' && transport.html !== null) {
		    container.html(transport.html);
		    if ($.isFunction(showUpdateLayer)) showUpdateLayer(options);
		} else if ($.isFunction(processJSON)) { 
		    processJSON(transport); 
		} else {
		}
	    } else {
		container.html(xhr.responseText);
	    }
	    if (options && options.onSuccess && $.isFunction(options.onSuccess)) options.onSuccess(transport, status, xhr);
	    // IE bubbling? A most betöltött form-okra...
	},
	error: function (xhr,status,errText) { // Type: Function( jqXHR jqXHR, String textStatus, String errorThrown )
	    _debug(status);
	    _debug(errText);
	    updateSalt(xhr.getResponseHeader('Etag'));
	},
	complete: function(xhr, status) {
	    mayorLoaderStop();
	    updateSalt(xhr.getResponseHeader('Etag'));
	}
    });
}

ajaxRequest = function(formElement, options) {

    var url = formElement.attr('action').replace(/skin=([^&]*)/,'skin=ajax');
    var adat = formElement.serializeArray();
    adat.push({ name: 'mayorToken', value : $('body').data('mayortoken') });

    mayorLoaderStart();
    $.ajax(url,{
	data: adat,
	type: 'POST',
	success: function(transport, status, xhr){
	    if (options && options.onSuccess && $.isFunction(options.onSuccess)) options.onSuccess(transport, status, xhr);
	},
	error: function (xhr,status,errText) { // Type: Function( jqXHR jqXHR, String textStatus, String errorThrown )
	    _debug('stat: '+status);
	    _debug('errTxt: '+errText);
	    if (options && options.onFailure && $.isFunction(options.onFailure)) options.onFailure(xhr,status,errText);
	},
	complete: function(xhr, status) {
	    mayorLoaderStop();
	    updateSalt(xhr.getResponseHeader('Etag'));
	}

    });
}

var showUpdateLayer = function() {}
var processJSON;
updateSalt = function(etagHeader) {
    if (etagHeader !== null) {
	/**
	 *  A header Etag mezője (__SALTVALUE-__SALTNAME[-...]) alapján frissítjük az input.salt mezőket
	**/
	etagArray=etagHeader.split("-");
	$('input.salt').each(
    	    function(index) {
        	// tömörített oldalküldés (?) esetén a web-szerver 
        	if ($(this).prop('name') == etagArray[1]) $(this).val(etagArray[0]);
    	    }
	);
	$('input.mayorToken').each(
    	    function(index) {
        	if ($(this).prop('name') == 'mayorToken') $(this).val(etagArray[2]);
    	    }
	);
	$('body').data('mayortoken',etagArray[2]);
    }
}

// Hasznos függvények
// string funkciók
function LTrim(str) { return str.replace(/\s*((\S+\s*)*)/, "$1"); }
function RTrim(str) { return str.replace(/((\s*\S+)*)\s*/, "$1"); }
function Trim(str)  { return LTrim(RTrim(str)); }

// formátum-ellenőrzők
function IsEmpty(str) {
    return (str === null | Trim(str) === "") ? true : false;
}

function IsEmail(str) {
    var reEmail = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
    return (str) ? reEmail.test(Trim(str)) : false;
}

function IsInteger(str) {
    var reInteger = /^[+-]?\d+?$/;
    return (str) ? reInteger.test(Trim(str)) : false;
}

function IsNumber(str) {
    var reNumber = /^[+-]?\d+([,\.]\d+)?$/;
    return (str) ? reNumber.test(Trim(str)) : false;
}

function IsHexa(str) {
    var reString = /^[0-9A-Fa-f]*?$/;
    return (str) ? reString.test(Trim(str)) : false;
}

function IsDate(str) {
    var reDate = /^(19|20)\d\d([-/.])(0[1-9]|1[0-2])\2(0[1-9]|[12][0-9]|3[01])$/;
    return (str) ? reDate.test(Trim(str)) : false;
}

function CorrectDate(str) {
    if (IsDate(str))
	return Trim(str).replace(/^(\d{4})[-/.](\d{2})[-/.](\d{2})$/, "$1.$2.$3");
    else
	return null;
}

mayorSessionTimeOutAlert();

function mayorSessionTimeOutAlert() {
    $('#takaro').fadeIn();
    $('#updateWindow').fadeIn();
    $('#updateForm').html('<div class="infoMsg" style="margin-bottom:20px;">A munkamenet hamarosan lejár!</div>').fadeIn();
    $('body,html').animate({scrollTop: 0}, 800);
}

function mayorSessionTimedOut() {
//    $('#takaro').fadeOut();
//    $('.infoMsg').fadeOut();
//    $('#mayorhead').append('<div id="mayorbodytakaro" style="background-color: rgba(100,100,100,0.1);z-index: inherit;height:100%;width:100%; position:absolute; top:0px;"><div class="errorMsg" style="margin-top:130px;">A munkamenet lejárt, kérjük jelentkezzen be újra!</div></div>').fadeIn();
    $('#mayorbody').fadeOut();
    window.location.replace(location.origin);
}

jQuery.fn.preventDoubleSubmission = function() {
  $(this).on('submit',function(e){
    var $form = $(this);
    if ($form.data('submitted') === true) {
        e.preventDefault();
    } else {
        $form.data('submitted', true);
    }
  });
  return this;
};

/* teszt
function isNear( $element, distance, event ) {
    var left = $element.offset().left - distance,
        top = $element.offset().top - distance,
        right = left + $element.width() + ( 2 * distance ),
        bottom = top + $element.height() + ( 2 * distance ),
        x = event.pageX,
        y = event.pageY;
    return ( x > left && x < right && y > top && y < bottom );    
};
*/

function href(p) {
    var get = '';
    $.each( p, function( key, value ) { get += key + "=" + value + "&"; });
    return ('index.php?policy=private&'+get+'sessionID='+$('body').data('sessionid')).replace('&','&#38;');
}

$(document).ready(function() { // facebook

 if (typeof(FB_APP_ID)!=='undefined' && FB_APP_ID!='') {

  window.fbAsyncInit = function() {
  FB.init({
    appId      : FB_APP_ID,
    cookie     : true,
    xfbml      : true,
    version    : 'v2.2'
  });
  FB.getLoginStatus(function(response) {
    if (response.status === 'connected') {
	$('#mglFBconnect').removeClass('FBstatusunknown').addClass('FB2');
    } else if (response.status === 'not_authorized') {
	$('#mglFBconnect').removeClass('FBstatusunknown').addClass('FB1');
    } else {
	$('#mglFBconnect').removeClass('FBstatusunknown').addClass('FB0');
    }
  }); // ,true - ha nem cache-elt változat kell
    FB.Event.subscribe('auth.login', my_login_event);
    FB.Event.subscribe('auth.logout', my_logout_event);
    FB.Event.subscribe('auth.authResponseChange', my_authResponseChange_event);
  };
  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));
 }
}); // doc ready

var my_login_event = function() {
    //console.log('***facebook login event');
}

var my_logout_event = function() {
    //console.log('***facebook logout event');
}

var my_authResponseChange_event = function(response) {
    //console.log('***authResponseChange');
}

var mayor_facebookconnect_redirect = function() {
    var origUrl = $(location).attr('href');
    var pos = origUrl.indexOf("?");
    if (pos != -1) url = origUrl+'&action=facebooklogin';
    else url = origUrl+'?action=facebooklogin';
    window.location = url;
}


// Az ajax hívások vésszatérési értékét feldolgozó és a layer-t megjelenítő függvény változók inicializálása (hogy ne legyen undefined)
var showUpdateLayer = function() {};
var hideUpdateLayer = function() {};
var showUpdateWindowSide = function() {};
var hideUpdateWindowSide = function() {};
var showUpdateWindowSideSub = function() {};
var hideUpdateWindowSideSub = function() {};
var processJSON;

$(document).ready(function() { // még több click eseménykezelő!
    $('#mayorMenuSearchIcon').on('click',function() {
	$('#mayorSearch').show(); 
	event.preventDefault();
	event.stopImmediatePropagation(); // STOP mayorClick
	$('#mayorSearch input[type=text]').focus();
    });
    $('#mayorNaviSearchIcon').on('click',function() {
	$('#mayorSearch').show(); 
	event.preventDefault();
	event.stopImmediatePropagation(); // STOP mayorClick
	$('#mayorSearch input[type=text]').focus();
    });

    //gapi.load('auth2', function() {
	//    gapi.auth2.init();
    //});
    if (typeof(GOOGLEAPI_CLIENT_ID)!=='undefined' && GOOGLEAPI_CLIENT_ID!='') {
	startGoogleAuth();
    }
});

// GOOGLE
var googleUser = {};
var startGoogleAuth = function() {
    gapi.load('auth2', function(){
      auth2 = gapi.auth2.init({
        client_id: GOOGLEAPI_CLIENT_ID,
        cookiepolicy: 'single_host_origin',
      });
      attachSignin(document.getElementById('googleLoginBtn'));
    });
};
function attachSignin(element) {
    auth2.attachClickHandler(element, {},
        function(googleUser) {
	    var id_token = googleUser.getAuthResponse().id_token;
	    var origUrl = $(location).attr('href');
	    var pos = origUrl.indexOf("?");
	    if (pos != -1) url = origUrl+'&action=googleapilogin'+'&id_token='+id_token;
	    else url = origUrl+'?action=googleapilogin'+'&id_token='+id_token;
	    window.location = url;
        }, function(error) {
          // alert(JSON.stringify(error, undefined, 2));
        });
}
// GOOGLE

