
    updateTbody = function(tbodyElement) {
    /*
     * Feltételezzük, hogy egy látható, slideUpAll nélküli nyitó sorral kezdődik a tbody
     */
		tbodyElement = $(tbodyElement);
		firstTr = tbodyElement.find('tr:first');
	    	nextTrDb = firstTr.nextAll('tr').length;
		// első sorban csak slideUpAll, vagy Down lehet
		firstTr.find('.slideUp').remove();
		if (nextTrDb > 0) {
		    firstTr.find('td.slide').append('<span class="slideUpAll icon-caret-up"></span>');
		    if (firstTr.data('db') == nextTrDb) { // Az összes sor az első sor alatt van --> eddig is volt Down, kell UpAll, de rejtve
			firstTr.find('.slideUpAll').hide();
		    }
		} // vannak további sorok
    }

	ajaxGetTankorAdat = function(tankorId) {
	    postData = { 'tankorId':tankorId }

	    $.ajax({
		    type: "POST",
		    url: "index.php?page=naplo&sub=tools&f=getTankorAdat&policy=private&skin=ajax&sessionID="+$('body').data('sessionID'),
		    data: postData,
		    dataType: 'json'
	    }).done(function( msg, status, jqXHR ) {
		    processJSONTankorAdat(msg);
	    }).fail(function( jqXHR, textStatus, errorThrown ) {
		    //console.log('fail');
		    //console.log(jqXHR);
	    });

	}

    processJSONAddBontas = function( msg ) {
		//console.log(JSON.stringify(msg));
	
		// utolsó érintett tr
		lastTr = $('#tr-'+msg.bontas[msg.bontas.length-1].osztalyId+'-'+msg.bontas[msg.bontas.length-1].kepzesOratervId);
		// A tartalmazó tbody id-je...
		tbodyId = lastTr.closest('tbody').attr('id');
		// eddigi bontásszám
		bontasDb = lastTr.find('div.bontas').length;
		// Ha nem az utolsó a tbody-n belül, akkor az őt követő tr-eket külön tbody-ba helyezzük
		nextLastTr = lastTr.nextAll('tr');
		if (nextLastTr.length > 0) {
		    tbodyAfter = $('<tbody>').attr('id', tbodyId+'-'+bontasDb).insertAfter($('#'+tbodyId));
		    nextLastTr.appendTo(tbodyAfter);
		    updateTbody(tbodyAfter);
		}
		keszKoDbCsokken = (lastTr.hasClass('kesz'));
		// div beszúrása
		for (i=0; i<msg.bontas.length; i++) {
		    selector = $('#bTd-'+msg.bontas[i].osztalyId+'-'+msg.bontas[i].kepzesOratervId);
		    selector.append(
			'<div class="bontas" id="bontas-'+msg.bontas[i].bontasId+'"><span class="bontasDb">'+(bontasDb+1)+'</span>. '
			+msg.targyNev+' csoport ('+msg.bontas[i].bontasId+')<span class="delBontas icon-remove-circle"></span>'
			+'<ul class="tankor-oraszam">'
			+'<li class="marad">'
			+parseFloat(selector.closest('tr').data('hetioraszam'))
			+'</li>'
			+'</ul></div>');
		    $('#bontas-'+msg.bontas[i].bontasId).data('tankororaszam', []);
		    $('#bontas-'+msg.bontas[i].bontasId).data('hetioraszam', 0);
		    $('#bontas-'+msg.bontas[i].bontasId).data('targyid', msg.bontas[i].targyId);
		    $('#bontas-'+msg.bontas[i].bontasId).data('key', msg.bontas[i].bontasId);
		    $('#bontas-'+msg.bontas[i].bontasId).data('keys', msg.bontas[i].bontasId);
		    // az érintett sorok most biztos nem "kész"-ek, mert van egy tankörök nélküli bontásuk
		    selector.closest('tr').removeClass('kesz');
		}
		// A stat adatok módosítása
		$('#statBontas').html( parseInt($('#statBontas').html())+parseInt(msg.bontas.length) );
		if (keszKoDbCsokken) $('#statKoKesz').html( parseInt($('#statKoKesz').html())-msg.bontas.length );
		// a felső bontás keys paraméterének beállítása
		keys = $('#bontas-'+msg.bontas[0].bontasId).data('key');
		for (i=1; i<msg.bontas.length; i++) {
		    keys += ','+$('#bontas-'+msg.bontas[i].bontasId).data('key');
		}	
		$('#bontas-'+msg.bontas[0].bontasId).data('keys', keys)
		// ha kell, akkor a módosított sorok áthelyezése új tbody-ba
		firstTr = $('#tr-'+msg.bontas[0].osztalyId+'-'+msg.bontas[0].kepzesOratervId);
		prevFirstTr = firstTr.prevAll('tr');
		if (prevFirstTr.length > 0) {
		    tbodyModified = $('<tbody>').attr('id', tbodyId+'-'+(bontasDb+1)).insertAfter($('#'+tbodyId));
		    for (i=0; i<msg.bontas.length; i++) {
			$('#tr-'+msg.bontas[i].osztalyId+'-'+msg.bontas[i].kepzesOratervId).appendTo(tbodyModified);
		    }
		    updateTbody(tbodyModified);
		} else {
		    firstTr.find('.slideUpAll').hide();
		}
    }

    processJSONDelBontas = function( msg ) {
		//console.log(JSON.stringify(msg));
		if (msg.result == 'success') {
	
		    // utolsó érintett tr
		    lastTr = $('#bontas-'+msg.bontasIds[msg.bontasIds.length-1]).closest('tr');
		    // A tartalmazó tbody id-je...
		    tbodyId = lastTr.closest('tbody').attr('id');
		    // eddigi bontásszám
		    bontasDb = lastTr.find('div.bontas').length;
		    // Ha nem az utolsó a tbody-n belül, akkor az őt követő tr-eket külön tbody-ba helyezzük
		    nextLastTr = lastTr.nextAll('tr');
		    if (nextLastTr.length > 0) {
			tbodyAfter = $('<tbody>').attr('id', tbodyId+'-'+bontasDb).insertAfter($('#'+tbodyId));
			nextLastTr.appendTo(tbodyAfter);
			updateTbody(tbodyAfter);
		    }
	
		    // ha kell, akkor a módosított sorok áthelyezése új tbody-ba
		    firstTr = $('#bontas-'+msg.bontasIds[0]).closest('tr');
		    prevFirstTr = firstTr.prevAll('tr');
		    if (prevFirstTr.length > 0) {
				tbodyModified = $('<tbody>').attr('id', tbodyId+'-'+(bontasDb-1)).insertAfter($('#'+tbodyId));
				for (i=0; i<msg.bontasIds.length; i++) {
				    $('#bontas-'+msg.bontasIds[i]).closest('tr').appendTo(tbodyModified);
				}
				updateTbody(tbodyModified);
		    } else {
				firstTr.find('.slideUpAll').hide();
		    }
	
		    // div törlése
		    keszBontasDbCsokken = ($('#bontas-'+msg.bontasIds[0]).data('hetioraszam') == lastTr.data('hetioraszam'));
		    for (i=0; i<msg.bontasIds.length; i++) {
				$('#bontas-'+msg.bontasIds[i]).nextAll('div.bontas').find('span.bontasDb').each(function(index) {
					$(this).html($(this).html()-1);
				});
				$('#bontas-'+msg.bontasIds[i]).remove();
		    }
		    // stat adatok módosítása
		    $('#statBontas').html( parseInt($('#statBontas').html())-parseInt(msg.bontasIds.length) );
		    if (keszBontasDbCsokken) $('#statBontasKesz').html( parseInt($('#statBontasKesz').html())-parseInt(msg.bontasIds.length) );
		    // Egy felesleges bontás törlésével "kész"-szé válhatott a sor
		    if (!lastTr.hasClass('kesz')) {
				var kesz = (lastTr.find('div.bontas').length > 0);
				if (kesz) lastTr.find('div.bontas').each(function(index) {
				    if ($(this).data('hetioraszam') != lastTr.data('hetioraszam')) kesz = false;
				});
				if (kesz) {
				    lastTr.closest('tbody').find('tr').addClass('kesz');
				    $('#statKoKesz').html( parseInt($('#statKoKesz').html())+lastTr.closest('tbody').find('tr').length );
				    if ($('#keszRejt').is(':checked')) lastTr.closest('tbody').hide();
				}
		    }
		
	
		}
    }

    processJSONTankorLista = function( msg, element ) {
		//console.log(JSON.stringify(msg));

		// a blokk tárgy típusa
		ttTdElement = element.closest('tr').find('th.targyTipus');
		if (ttTdElement.length==0) targyTipus = 'mintatantervi';
		else targyTipus = ttTdElement.html();
		// a képzésOraterv bejegyzés heti óraszáma
		koHetiOraszam = parseFloat(element.closest('tr').data('hetioraszam'));
		// a bontás össz-óraszáma és tankorId-i
		to = element.data('tankororaszam');
		bontasOraszam = 0;
		bontasTankorIds = [];
		if ($.isArray(to)) {
		    for (i=0; i<to.length; i++) {
			bontasOraszam += parseFloat(to[i].hetiOraszam);
			bontasTankorIds[i] = ''+to[i].tankorId; // hogy string legyen mindenképp!!
		    }
		}
		bontasSzabadOraszam = koHetiOraszam - bontasOraszam;
		// szemeszterek
		vanSzemeszter = [(element.closest('tbody').find('.felev1').length>0), (element.closest('tbody').find('.felev2').length>0)];
	
		ulKiemeltElement = $('<ul>').addClass('kiemelt').addClass('tankorLista');
		ulElement = $('<ul>').addClass('tankorLista');
		for (i=0; i<msg.tankorok.length; i++) {
		    /*
			- ha a bontás óraszám == kepzesOraterv oraszámmal - nem lehet új tankört hozzárendelni (class="ok")
			- ha bontas óraszám > kepzesOraterv óraszám, akkor az hiba! - (class="fail")
			- ha bontas óraszám < kepzesOraterv óraszám, akkor --> tankör-list, tankörönként:
			    - hozzárendelt már - akkor nem lehet újra kiválasztani (class="hozzarendelt")
			    - van targyTipushoz már óraszáma --> csak az az óraszám lehet
				- ha ez több, mint a bontás szabad óraszáma, akkor nem lehet hozzárendelni
				- ha nem több, akkor pontosan ezt az óraszámot rendelhetjük hozzá
			    - nincs tárgytípushoz óraszáma, de a tankörnek már nincs fennmaradó -> nem lehet hozzárendelni
			    - nincs tárgytípushoz és van szabad órája: hozzá-óraszám = min(tankörSzabad[szemeszter?], bontasSzabad[szemeszter?])
		     */
		    tAdat = msg.tankorok[i];
		    // kezdőértékek
		    classStr='tankorBontas';
		    maxOraszam = 0;
		    vanTargyTipusOraszam = tankorOraszamElfogyott = tankorOraszamSokFail = oraszamFix = false;
		    // hozzá van-e már rendelve
		    hozzarendelt = ($.inArray(tAdat.tankorId, bontasTankorIds) > -1);
		    oStr = '';
		    // fontos lenne, hogy csak a szükséges szemesztereken menjen végig a ciklus!!
		    for (szemeszter=0; szemeszter<2; szemeszter++) { // 0 indexű! hogy js alatt tömb lehessen
			if (!vanSzemeszter[szemeszter]) continue;
			oraszam = parseFloat(msg.tankorok[i].oraszam[szemeszter]);
			oStr += '['+oraszam+'/';
			sum=0;
			for (t=0; t<msg.tankorok[i].bontasOraszam[szemeszter].length; t++) {
			    hetiOraszam = parseFloat(msg.tankorok[i].bontasOraszam[szemeszter][t].hetiOraszam);
			    sum+=parseFloat(hetiOraszam);
			    if (msg.tankorok[i].bontasOraszam[szemeszter][t].tipus==targyTipus) {
				vanTargyTipusOraszam = true;
				maxOraszam = hetiOraszam;
				oStr += '<strong>'+hetiOraszam+'</strong>';
			    } else {
				oStr+=hetiOraszam;
			    }
			    if (t < msg.tankorok[i].bontasOraszam[szemeszter].length-1) oStr += '+';
			}
			oStr += (sum==0?'0]':']');
			tankorSzabadOraszam = oraszam - sum;
			if (hozzarendelt) {
			    oraszamFix = true;
			    classStr='tiltott hozzarendelt';
			    maxOraszam = 0;
			} else if (vanTargyTipusOraszam) {
			    oraszamFix = true;
			    if (maxOraszam > bontasSzabadOraszam) { // ha túl sok a tankör tárgyTipushoz kötött óraszáma
				classStr="tiltott";
				maxOraszam = 0;
			    } else {
					classStr="osszevonasTilt"
				}
			} else if (tankorSzabadOraszam == 0) {
			    oraszamFix = true;
			    classStr='tiltott';
			    tankorOraszamElfogyott = true;
			    maxOraszam = 0;
			} else if (tankorSzabadOraszam < 0) {
			    oraszamFix = true;
			    classStr='tiltott hibas';
			    tankorOraszamSokFail = true;
			    maxOraszam = 0;
			} else if (bontasSzabadOraszam<=0) {
			    oraszamFix = true;
			    classStr="tiltott";
			    maxOraszam = 0;
			} else if (maxOraszam == 0) { // pl. az első szemeszter vizsgálatakor - a második szemeszter esetén már lehet pozitív
			    maxOraszam = Math.min(tankorSzabadOraszam, bontasSzabadOraszam);
			} else { // ha az első szemesztert is figyelembe kell venni...
			    maxOraszam = Math.min(maxOraszam, tankorSzabadOraszam, bontasSzabadOraszam);
			}
		    }
		    oStr2 = '<div class="jobbra"><strong>';
		    if (!oraszamFix) oStr2 += '<span class="icon-caret-up plusz"></span><span class="icon-caret-down minusz"></span>';
		    oStr2 += '<span class="data">'+maxOraszam.toFixed(2)+'</span></strong></div>';
		    liElement = $('<li class="'+classStr+'">'+oStr2+tAdat.tankorNev+' ('+tAdat.tankorId+') - '+oStr+'</li>').data({'tankorId':tAdat.tankorId, 'hetiOraszam': maxOraszam, 'maxOraszam': maxOraszam}).attr('id','tankor-'+tAdat.tankorId);
		    if (tAdat.kiemelt) liElement.appendTo(ulKiemeltElement);
		    else liElement.appendTo(ulElement);
	
		}
		$('#updateWindowSideContent').html('');
		$('<p class="bontasAdat">Tárgy típus: '+targyTipus+'; heti óraszám: '+koHetiOraszam+'/'+bontasOraszam+'</p>').appendTo($('#updateWindowSideContent'));
		if (bontasOraszam==0) $('<div id="addTankor"><span class="icon-plus-sign"></span> Új tankör&nbsp;&nbsp;&nbsp;<span class="icon-chevron-down"></span></div>').appendTo($('#updateWindowSideContent'));
		else $('<div id="disableAddTankor"><span class="icon-plus-sign"></span> Új tankör&nbsp;&nbsp;&nbsp;<span class="icon-chevron-down"></span></div>').appendTo($('#updateWindowSideContent'));
		ulKiemeltElement.appendTo($('#updateWindowSideContent'));
		ulElement.appendTo($('#updateWindowSideContent'));
		$('#updateWindowSide h1 div').html('Tankörök');
		$('#updateWindowSide').data('target', element);
		$('#updateWindowSide').addClass('nyitva');
    }
    
    processJSONTankorMod = function( msg ) {
		//console.log(JSON.stringify(msg));
		txt = $('#updateWindowSide').data('target').html();
		s1 = txt.substr(0, txt.indexOf('] ')+2);
		s2 = txt.substr(txt.indexOf(' ('));
		$('#updateWindowSide').data('target').html(s1+msg.tankorNevTargyNelkul+s2);
		//console.log(s1+msg.tankorNevTargyNelkul+s2);
		processJSONTankorAdat( msg );
	}

    processJSONBontasTankor = function( msg ) {
		//console.log(JSON.stringify(msg));
	
		hetiOraszam = parseFloat(msg.hetiOraszam);
		tankorId = msg.tankorId;
		tankorNev = msg.tankorNev;
		for (i=0; i<msg.bontasIds.length; i++) {
		    bontasId = msg.bontasIds[i];
		    element = $('#bontas-'+bontasId);
		    liElement = $('<li>['+hetiOraszam+'] '+tankorNev+' ('+tankorId+')</li>');
		    liElement.data('tankorid',tankorId).addClass('tankorAdat').insertBefore(element.find('li.marad'));
		    element.data('tankororaszam').push({'tankorId': tankorId, 'hetiOraszam': hetiOraszam});
		    element.data('hetioraszam', hetiOraszam+element.data('hetioraszam'));
		    marad = element.closest('tr').data('hetioraszam')-element.data('hetioraszam');
		    element.find('li.marad').html(marad);
		    if (marad<0) classStr='bontas fail';
		    else if (marad==0) classStr='bontas ok';
		    else classStr='bontas';
		    element.attr('class',classStr);
		}
		// Az új tankör hozzáadásával "kész"-szé válhatott a sor - (element: az utolsó bontás div-je)
		{ // eddig biztos nem volt kész a sor - mert tudtunk hozzárendelni bontást...
			var sorKesz = true; // biztos van legalább egy bontás - hisz hozzárendeltünk egy tankört
			trElement = element.closest('tr');
			trElement.find('div.bontas').each(function(index) {
			    if ($(this).data('hetioraszam') != trElement.data('hetioraszam')) sorKesz = false;
			});
			if (element.data('hetioraszam')==trElement.data('hetioraszam')) { // a bontások kész lettek
			    $('#statBontasKesz').html( parseInt($('#statBontasKesz').html())+msg.bontasIds.length );
			}
			if (sorKesz) {
			    // stat adatok állítása
			    $('#statKoKesz').html( parseInt($('#statKoKesz').html())+msg.bontasIds.length );
			    trElement.closest('tbody').find('tr').addClass('kesz');
			    if ($('#keszRejt').is(':checked')) trElement.closest('tbody').hide();
			}
		}
    }

    processJSONUjTankor = function(msg) {
		//console.log(JSON.stringify(msg));
		// A tankört hozzá is rendeltük a bontáshoz
		processJSONBontasTankor( msg );
		// Tankör adatainak megjelenítése
		ajaxGetTankorAdat(msg.tankorId);	
    }
    
    processJSONTankorAdat = function( msg ) {
		//console.log(JSON.stringify(msg));
		
		$('#updateWindowSideContent').html('');
		$('#updateWindowSideTitle').html('Tankör adatai');
		//$('<p class="tankorNev">'+msg.tankorNev+' ('+msg.tankorId+')</p>').appendTo('#updateWindowSideContent');
		$('<p class="tankorNev">'	+msg.tankorNevReszei.evfOszt+' '
									+msg.tankorNevReszei.targyNev
									+(msg.tankorNevReszei.tankorJel!=''&&msg.tankorNevReszei.tankorJel!=null?msg.tankorNevReszei.tankorJel+' ':'')
									+' <span class="tankorNevExtra">'+msg.tankorNevReszei.tankorNevExtra+'</span>'
									+'<input id="tankorNevExtra" type="text" name="tankorNevExtra" value="'+msg.tankorNevReszei.tankorNevExtra+'" />'
									+' ('+msg.tankorId+')</p>').appendTo('#updateWindowSideContent');
		$('<p class="tankorModosit">Módosít!</p>').appendTo('#updateWindowSideContent');
		// adatok
		ulStr = '<ul>'
			+'<li>Évközi követelmény: '+msg.kovetelmeny+'</li>'
			+'<li>Létszám korlát: '+msg.min+'-'+msg.max+'</li>'
			+'<li>Tankör-típus: '+msg.rovidNev+' ('+msg.tankorTipusId+')</li>'
			+'</ul>';
		$(ulStr).appendTo('#updateWindowSideContent');
		// osztályok
		ulStr = '<ul id="tankorOsztaly">';
		pStr = '<div class="slideToggleContainer" id="pTankorOsztaly">Osztályai: <span class="tankorData slideToggle">';
		for (i=0; i<msg.osztalyok.length; i++) {
			ulStr += '<li>'
					+'<input type="checkbox" name="osztalyId[]" value="'+msg.osztalyok[i].osztalyId+'" id="oTankorId-'+msg.osztalyok[i].osztalyId+'" ';
			if ($.inArray(msg.osztalyok[i].osztalyId, msg.osztalyIds)>-1) {
				ulStr += 'checked="checked" ';
				pStr += msg.osztalyok[i].osztalyJel+' ('+msg.osztalyok[i].osztalyId+') ';
			}
			ulStr += '/> '
			+'<label for="oTankorId-'+msg.osztalyok[i].osztalyId+'">'+msg.osztalyok[i].osztalyJel+' ('+msg.osztalyok[i].osztalyId+')</label></li>';
		}
		ulStr += '</ul>';
		pStr += '</span><span class="icon-chevron-down slideToggle"></span>'+ulStr+'</div>';
		$(pStr).appendTo('#updateWindowSideContent');
		// szemeszterek, óraszámok
		ulStr = '<ul id="tankorSzemeszter">';
		for (i=0; i<msg.tankorSzemeszter.length; i++) {
			ulStr += '<li>'+msg.tankorSzemeszter[i].tanev+'/'+msg.tankorSzemeszter[i].szemeszter
				+'<input maxlength="5" type="text" name="sz-'+msg.tankorSzemeszter[i].tanev+'-'+msg.tankorSzemeszter[i].szemeszter+'" value="'+msg.tankorSzemeszter[i].oraszam+'" />'
				+'</li>';
		}
		ulStr += '</ul>';
		pStr = '<div class="slideToggleContainer" id="pTankorSzemeszter">Óraszám: <span class="tankorData slideToggle">'+msg.oraszam+' ('+msg.tanev+'/'+msg.szemeszter+')</span>'
				+'<span class="icon-chevron-down slideToggle"></span>'
				+ulStr
				+'</div>';
		$(pStr).appendTo('#updateWindowSideContent');
				
//		$('<p>'+JSON.stringify(msg)+'</p>').appendTo($('#updateWindowSideContent'));
		if (!$('#updateWindowSide').hasClass('nyitva')) $('#updateWindowSide').addClass('nyitva')
	}

    slideUp = function(element) {
	    // A fedett sorok számát eltároljuk, majd 0-ra állítjuk
	    trElement = element.closest('tr');
	    bontasArray = trElement.find('div.bontas').get();
	    prevTrElement = trElement.prevAll('tr').filter(':visible:first');
	    prevBontasArray = prevTrElement.find('div.bontas').get();

	    // shadow elvétele, slideUp, Down törlése - vizuális elemek
	    if (trElement.data('db') < 6) trElement.removeClass('shadow'+trElement.data('db'));
	    else trElement.removeClass('shadow5');
	    trElement.slideUp(100);
	    trElement.find('.slideDown').remove();
	    // db adatok módosítása
	    origDb = prevTrElement.data('db');
	    prevTrElement.data('db',origDb+trElement.data('db')+1);
	    trElement.data('db',0);
	    // A fedett sorok kulcsait eltároljuk, majd a sor kulcsára cseréljük
	    origKeys = prevTrElement.data('keys');
	    prevTrElement.data('keys', origKeys+','+trElement.data('keys'));
	    trElement.data('keys', trElement.data('key'));
	    // bontások kulcsadatainak módosítása
	    for (i=0; i<bontasArray.length; i++) {
		origKeys = $(prevBontasArray[i]).data('keys');
		$(prevBontasArray[i]).data('keys', origKeys+','+$(bontasArray[i]).data('keys'));
		$(bontasArray[i]).data('keys', $(bontasArray[i]).data('key'));
	    }
	    // prev - shadow elvétele
	    if (origDb < 6) prevTrElement.removeClass('shadow'+origDb);
	    else prevTrElement.removeClass('shadow5');
	    // prev - ha most került alá sor, akkor kirakjuk a lenyitót
	    if (origDb == 0) prevTrElement.find('td.slide').append('<span class="slideDown icon-chevron-down"></span>');
	    // prev - shadow
	    if (prevTrElement.data('db')<6) prevTrElement.addClass('shadow'+prevTrElement.data('db'));
	    else prevTrElement.addClass('shadow5');
	    // prev - ha minde becsukva, akkor nem kell slideUpAll
	    if (prevTrElement.data('db') == prevTrElement.nextAll('tr').length) prevTrElement.find('.slideUpAll').hide();

    }

    slideDown = function(element) {
	    trElement = element.closest('tr');
	    bontasArray = trElement.find('div.bontas').get();
	    // becsuk
	    trElement.nextAll('tr').filter(':hidden').slideDown();
	    // shadow leszedése
	    if (trElement.data('db') < 6) trElement.removeClass('shadow'+trElement.data('db'));
	    else trElement.removeClass('shadow5');
	    // adatok alaphelyzetbe
	    trElement.data('db',0);
	    trElement.data('keys', trElement.data('key'));
	    for (i=0; i<bontasArray.length; i++) $(bontasArray[i]).data('keys', $(bontasArray[i]).data('key'));
	    element.closest('tbody').find('tr:first .slideUpAll').show();
	    // Down eltüntetése
	    element.remove();
    }

    initBontas = function() {

		if ($('table.bontas').length == 0) {
		    $('form#szures').slideDown(1000);
		} else {
		    $($('table.bontas .slideUp').get().reverse()).each(function(index) {
			slideUp($(this));
		    });
		}
    }


$(function() {

    $('table.bontas tr').data('db',0);
    var params = $.parseParams(window.location.toString().split('?')[1] || '' );
    var sessionID=params.sessionID?params.sessionID:'';
    $('body').data('sessionID',sessionID);
    // A tárgyak div inicializálása
    var height = $('div#targyak').height();
    var width = $('div#targyak').width();
    var targyakTop =parseInt($('div#targyak').css('top'));
    $('div#targyakUp').css({'width':width-12});
    $('div#targyakDown').css({'width':width-12,'top':height+targyakTop-30});

    initBontas();

    $('#keszRejt').change(function(event) {
		var element = $(event.target);
		if (element.is(':checked')) {
		    $('table.bontas tr.kesz:first-child').closest('tbody').hide();
		} else {
		    $('table.bontas tr.kesz:first-child').closest('tbody').show();
		}
    });
    
    $('body').change(function(event) {
		var element = $(event.target);
		if (element.closest('div').hasClass('slideToggleContainer')) {
			element.closest('div').find('span.tankorData').addClass('changed');
			$('#updateWindowSideContent p.tankorModosit').slideDown();
		} else if (element.attr('id')=='tankorNevExtra') {
			if (!element.prev('span.tankorNevExtra').hasClass('changed')) {
				element.prev('span.tankorNevExtra').addClass('changed');
				$('#updateWindowSideContent p.tankorModosit').slideDown();
			}
		}
	});
    
    $('body').focusout(function(event) {
		var element = $(event.target);
		if (element.attr('id')=='tankorNevExtra') {
			element.prev('span.tankorNevExtra').html( element.val() ).show();
			element.hide();
		}
	});

	$('#updateWindowSide').on('keydown', 'ul#tankorSzemeszter li:last-child input', function(event) {

		var charKeyCode = event.keyCode ? event.keyCode : event.which;
		var shiftKey = event.shiftKey ? event.shiftKey : ((charKeyCode == 16) ? true : false);
		var altKey = event.altKey ? event.altKey : ((charKeyCode == 18) ? true : false);
		var ctrlKey = event.ctrlKey ? event.ctrlKey : ((charKeyCode == 17) ? true : false);
		element = $(event.target);

		if (charKeyCode == 9) {
			event.preventDefault();
			tmp = element.attr('name').split('-');
			tanev = 1+parseInt(tmp[1]); 
			for (szemeszter = 1; szemeszter<3; szemeszter++) {
				$('<li>'+tanev+'/'+szemeszter
					+'<input maxlength="5" type="text" name="sz-'+tanev+'-'+szemeszter+'" value="" />'
					+'</li>').appendTo('ul#tankorSzemeszter');
			}
			element.closest('li').next('li').find('input').focus();
		}

	});

	$('#updateWindowSide').on('keydown', 'ul#tankorSzemeszter li:first-child input', function(event) {

		var charKeyCode = event.keyCode ? event.keyCode : event.which;
		var shiftKey = event.shiftKey ? event.shiftKey : ((charKeyCode == 16) ? true : false);
		var altKey = event.altKey ? event.altKey : ((charKeyCode == 18) ? true : false);
		var ctrlKey = event.ctrlKey ? event.ctrlKey : ((charKeyCode == 17) ? true : false);
		element = $(event.target);

		if (charKeyCode == 9 && shiftKey) {
			event.preventDefault();
			tmp = element.attr('name').split('-');
			tanev = parseInt(tmp[1])-1; 
			for (szemeszter = 1; szemeszter<3; szemeszter++) {
				$('<li>'+tanev+'/'+szemeszter
					+'<input maxlength="5" type="text" name="sz-'+tanev+'-'+szemeszter+'" value="" />'
					+'</li>').prependTo('ul#tankorSzemeszter');
			}
			element.closest('li').prev('li').find('input').focus();
		}

	});

    
    $('body').click(function(event) {
		var element = $(event.target);

		if (!element.hasClass('addBontasTargy')) {
		    $('div#targyak').hide();
		    $('table.bontas tr.aktiv').removeClass('aktiv');
		}
		if (element.hasClass('slideUp')) {
		    slideUp(element);
		} else if (element.hasClass('slideUpAll')) {
		    $(element.closest('tbody').find('.slideUp:visible').get().reverse()).each(function(index) {
				slideUp($(this));
		    });
		} else if (element.hasClass('slideDown')) {
		    slideDown(element);
		} else if (element.hasClass('addBontas')) {
		    
		    postData = { 'action':'addBontas', 'keys':element.closest('tr').data('keys')}
		    saltName = $('#bontasForm input.salt').prop('name');
		    saltValue = $('#bontasForm input.salt').val();
		    postData[saltName] = saltValue;
	
		    $.ajax({
				type: "POST",
				url: "index.php?page=naplo&sub=tanev&f=targyBontas&policy=private&skin=ajax&sessionID="+sessionID,
				data: postData,
				dataType: 'json'
		    }).done(function( msg, status, jqXHR ) {
				updateSalt(jqXHR.getResponseHeader('Etag'));
				processJSONAddBontas(msg);
		    });
		    
		} else if (element.hasClass('addBontasTargy')) {
		    // Az érintett sor kulcsát eltároljuk - hogy tudjuk hova kell visszatérni
		    $('div#targyak').data('keys',element.closest('tr').data('keys'));
	//tt	    
	eOffset=element.offset();
	//tt	    
	$('#targyak').css({'left':eOffset.left+25}).show();
		    element.closest('tr').addClass('aktiv');
		    
	//	    $('#targyak ul#targyakUl').appendTo('#updateWindowSideContent').focus();
	//	    $('#updateWindowSide').addClass('nyitva');
		    $('#targyak').show().focus();
		} else if (element.hasClass('selectTargy')) {
		    
		    postData = { 'action':'addBontasTargy', 'keys':$('div#targyak').data('keys'), 'targyId':element.data('targyid') }
		    saltName = $('#bontasForm input.salt').prop('name');
		    saltValue = $('#bontasForm input.salt').val();
		    postData[saltName] = saltValue;
	
		    $.ajax({
			type: "POST",
			url: "index.php?page=naplo&sub=tanev&f=targyBontas&policy=private&skin=ajax&sessionID="+sessionID,
			data: postData,
			dataType: 'json'
		    }).done(function( msg, status, jqXHR ) {
			updateSalt(jqXHR.getResponseHeader('Etag'));
			processJSONAddBontas(msg);
		    });
	
		} else if (element.hasClass('delBontas')) {
	
		    postData = { 'action':'delBontas', 'keys':element.closest('div.bontas').data('keys')}
		    saltName = $('#bontasForm input.salt').prop('name');
		    saltValue = $('#bontasForm input.salt').val();
		    postData[saltName] = saltValue;
	
		    $.ajax({
			type: "POST",
			url: "index.php?page=naplo&sub=tanev&f=targyBontas&policy=private&skin=ajax&sessionID="+sessionID,
			data: postData,
			dataType: 'json'
		    }).done(function( msg, status, jqXHR ) {
			updateSalt(jqXHR.getResponseHeader('Etag'));
			processJSONDelBontas(msg);
		    });
	
		} else if (element.hasClass('bontas')) {
				
		    if (element.hasClass('ok')) {
				alert('A csoport összes órája tankörhöz van már rendelve!');
		    } else if (element.hasClass('fail')) {
				alert('Hiba! A bontás összóraszáma nagyobb a képzés-óratervben megadottnál!');
		    }  {
		
				postData = { 'targyId':element.data('targyid'), 'bontasIds':element.data('keys').toString().split(',') }
		
				$.ajax({
				    type: "POST",
				    url: "index.php?page=naplo&sub=tools&f=tankorLista&policy=private&skin=ajax&sessionID="+sessionID,
				    data: postData,
				    dataType: 'json'
				}).done(function( msg, status, jqXHR ) {
				    processJSONTankorLista(msg, element);
				}).fail(function( jqXHR, textStatus, errorThrown ) {
				    //console.log('fail');
				    //console.log(jqXHR);
				});
		    }
		    
		} else if (element.hasClass('tankorBontas') && !element.hasClass('tiltott')) {
	
			
			    postData = { 'action':'bontasTankor', 'keys':$('#updateWindowSide').data('target').data('keys'), 
							 'tankorId': element.data('tankorId'), 'hetiOraszam':element.data('hetiOraszam') }
			    saltName = $('#bontasForm input.salt').prop('name');
			    saltValue = $('#bontasForm input.salt').val();
			    postData[saltName] = saltValue;
		
			    $.ajax({
					type: "POST",
					url: "index.php?page=naplo&sub=tanev&f=targyBontas&policy=private&skin=ajax&sessionID="+sessionID,
					data: postData,
					dataType: 'json'
			    }).done(function( msg, status, jqXHR ) {
					updateSalt(jqXHR.getResponseHeader('Etag'));
					processJSONBontasTankor(msg);
					$('#updateWindowSide').removeClass('nyitva')
					$('#updateWindowSideContent').html('');
				});
			
		} else if (element.hasClass('osszevonasTilt')) {
				element.removeClass('osszevonasTilt').addClass('osszevonasEnged').addClass('tankorBontas');
		} else if (element.hasClass('plusz')) {
		    if (!element.closest('li').hasClass('tiltott')) {
			data = element.closest('li').data();
			if (data.hetiOraszam < data.maxOraszam) {
			    element.closest('li').data('hetiOraszam', data.hetiOraszam+0.25);
			    element.closest('div').find('span.data').html(element.closest('li').data('hetiOraszam').toFixed(2));
			}
		    }
		} else if (element.hasClass('minusz')) {
		    if (!element.closest('li').hasClass('tiltott')) {
			data = element.closest('li').data();
				if (data.hetiOraszam > 0.25) {
				    element.closest('li').data('hetiOraszam', data.hetiOraszam-0.25);
				    element.closest('div').find('span.data').html(element.closest('li').data('hetiOraszam').toFixed(2));
				}
		    }
		} else if (element.attr('id') == 'addTankor') {

		    postData = { 'action':'ujTankor', 'bontasIds':$('#updateWindowSide').data('target').data('keys').toString().split(',') }
	
		    $.ajax({
			    type: "POST",
			    url: "index.php?page=naplo&sub=tools&f=ujTankor&policy=private&skin=ajax&sessionID="+sessionID,
			    data: postData,
			    dataType: 'json'
		    }).done(function( msg, status, jqXHR ) {
			    //console.log('ok');
			    processJSONUjTankor(msg);
		    }).fail(function( jqXHR, textStatus, errorThrown ) {
			    //console.log('fail');
			    //console.log(jqXHR);
		    });
	
		} else if (element.hasClass('tankorAdat')) {
	
			$('#updateWindowSide').data('target',element);
			ajaxGetTankorAdat(element.data('tankorid'));
		} else if (element.hasClass('tankorModosit')) {
			
		    postData = { 'tankorId':$('#updateWindowSide').data('target').data('tankorid'),'osztalyIds': [], 'tankorSzemeszter': [], 'tankorNevExtra': $('#updateWindowSide input#tankorNevExtra').val() }
			$('#updateWindowSide ul#tankorOsztaly input:checked').each(function(index){postData.osztalyIds.push($(this).val());})
			$('#updateWindowSide ul#tankorSzemeszter input[type=text]').each(function(index){  
				if ($(this).val() != '') {
					tmp = $(this).attr('name').split('-');
					postData.tankorSzemeszter.push({'tanev':tmp[1], 'szemeszter': tmp[2], 'oraszam': $(this).val() });
				}
			});

//console.log(postData.tankorSzemeszter);
	 
		    $.ajax({
			    type: "POST",
			    url: "index.php?page=naplo&sub=tools&f=tankorMod&policy=private&skin=ajax&sessionID="+sessionID,
			    data: postData,
			    dataType: 'json'
		    }).done(function( msg, status, jqXHR ) {
			    processJSONTankorMod(msg);
		    }).fail(function( jqXHR, textStatus, errorThrown ) {
			    //console.log('fail');
			    //console.log(jqXHR);
		    });
		} else if (element.hasClass('tankorNevExtra')) {
			
			element.next('input#tankorNevExtra').show();
			element.hide();
			
		} else if (element.hasClass('slideToggleContainer')) {
			
			element.find('ul').slideToggle();
		} else if (element.hasClass('slideToggle')) {
			element.closest('div').find('ul').slideToggle();
		} else if (element.hasClass('evfolyamJel')) {
		    if (element.find('input').is(':checked')) {
				$('div#osztaly div.osztEvf').show();
				$('div#osztaly div.evfolyamJel input').prop('checked',false);
				$('div#osztaly span.selectOsztaly input').prop('checked',false);
				$('div#kepzes div.kSelect input').prop('checked',false);
				$('div#osztaly div.evfolyamJel').removeClass('checked');
				$('div#osztaly span.selectOsztaly').removeClass('checked');
				$('div#kepzes div.kSelect').hide();
			    } else {
				element.addClass('checked');
				element.find('input').prop('checked',true);
				$('div#osztaly div.osztEvf').hide();
				$('div#osztEvf-'+element.find('input').val().replace('/','-')).show();
		    }
		} else if (element.hasClass('selectOsztaly')) {
		    isChecked = element.find('input').prop('checked');
		    element.find('input').prop('checked', !isChecked);
		    element.toggleClass('checked');
		    evfDiv = element.closest('div.osztEvf').find('div.evfolyamJel');
		    kepzesDiv=$('div#kepzes div.ko-'+element.find('input').val());
		    if (!isChecked) {
				kepzesDiv.show();
				kepzesDiv.find('input').prop('checked',true);
				kepzesDiv.each(function(index) {
				    db = $(this).data('db');
				    $(this).data('db', db+1);
				});
				if (!evfDiv.hasClass('checked')) {
				    evfDiv.addClass('checked');
				    evfDiv.find('input').prop('checked',true);
				    $('div#osztaly div.osztEvf').hide();
				    $('div#osztEvf-'+evfDiv.find('input').val().replace('/','-')).show();
				}
		    } else {
				kepzesDiv.each(function(index) {
				    db = $(this).data('db');
				    $(this).data('db', db-1);
				    if ($(this).data('db') == 0) {
					$(this).find('input').prop('checked',false);
					$(this).hide();
				    }
				});
			}
		} else if (element.closest('td').attr('id') == 'oratervenKivuli') {
			element.closest('td').find('ul').slideToggle();
		}
	
    });


    // tárgyak scrollozása
    $('div#targyak').mousemove(function(event) {
		var h = $('ul#targyakUl').height()+13;
		var offset = $($(this)).offset();
		var position = (event.pageY-offset.top)/$(this).height();
		if (position < 0.25) {
		    $('div#targyakDown').hide();
		    if ($('div#targyak').scrollTop() == 0) {
			$('div#targyakUp').hide();
			$(this).stop();
		    } else {
			$('div#targyakUp').show();
			$(this).stop().animate({ scrollTop: 0 }, 5000);
		    }
		} else if (position > 0.75) {
		    $('div#targyakUp').hide();
		    if ($('div#targyak').scrollTop() == h) {
			$('div#targyakDown').hide();
			$(this).stop();
		    } else {
			$('div#targyakDown').show();
			$(this).stop().animate({ scrollTop: h }, 5000);
		    }
		} else {
		    $('div#targyakUp').hide();
		    $('div#targyakDown').hide();
		    $(this).stop();
		}
    });


});






    
